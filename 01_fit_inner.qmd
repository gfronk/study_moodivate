---
title: "Analysis Workflow Step 1: Fit and select in inner loops"
author: "Gaylen Fronk"
format: html
---

## Setup

Load libraries
```{r}
library(glmnet)
library(dplyr)
library(tidyr)
library(stringr)
library(readr)
library(purrr)
library(furrr)
library(parsnip)
library(recipes)
library(tune)
library(yardstick)
library(rsample)
```

Source functions file
```{r}
source("fun_moodivate.R")
```

## Read in data

```{r}
d <- read_csv("S:/Projects/Dahne_J/Grants/2024-10_SteppedCare/development/data/toy_data.csv", show_col_types = FALSE)
```

Set up outcome variable levels
```{r}
y_col_name <- "bdi_outcome"
y_level_pos <- "responder"
y_level_neg <- "non_responder"
```

Clean/prep as needed (class variables, set factor levels)
```{r}
d <- d |> 
  # rename outcome to y
  rename(y = !!y_col_name) |> 
  mutate(y = case_when(
                       y == 0 ~ "non_responder",
                       y == 1 ~ "responder",
                       TRUE ~ NA_character_)) %>% 
  # y as a factor with two intuitive levels
  mutate(y = factor(y, levels = c(!!y_level_pos,
                                  !!y_level_neg))) 


```

## Divide data (nested CV)

Set cross-validation parameters
```{r}
cv_resample_type <- "nested"
cv_outer_resample <- "3_x_10"
cv_inner_resample <- "1_x_10"
seed_splits <- 52592
```

Make splits (from fun_moodivate.R)
```{r}
splits <- d |> 
  make_splits(cv_resample_type, cv_resample, cv_outer_resample,
              cv_inner_resample, the_seed = seed_splits)
```

## Set up model configurations & build recipe

Set model configuration parameters
```{r}
algorithm <- "glmnet"
ml_mode <- "classification"

# alpha (mixture)
hp1_glmnet <- c(0.05, seq(.1, 1, length.out = 10)) 

# lambda (penalty)
hp2_glmnet_min <- -8 # min for penalty grid - will be passed into exp(seq(min, max, length.out = out))
hp2_glmnet_max <- 2 # max for penalty grid
hp2_glmnet_out <- 100 # length of penalty grid
```

Build recipe
```{r}
rec <- recipe(y ~ ., data = d) |> 
  step_rm(record_id) |>
  # normalize numeric features for skew
  # step_YeoJohnson(all_numeric_predictors()) |> 
  # standardize features, required for glmnet for weighting
  step_normalize(all_predictors()) |> 
  # remove near-zero-variance features
  step_nzv(all_predictors())
```

## Make configurations tibble

This is a grid expansion of the splits and hyperparameters. Each row in the tibble will serve as a configuration that can then be fit below. This tibble will also be used to connect results to model configurations.

Extract CV parameters from strings
```{r}
# outer cv loop
outer_n_repeats <- as.numeric(str_remove(cv_outer_resample,
                                         "_x_\\d{1,2}"))
outer_n_folds <- as.numeric(str_remove(cv_outer_resample,
                                       "\\d{1,3}_x_"))
outer_split_num <- 1:(outer_n_repeats * outer_n_folds)

# inner cv loop
inner_n_repeats <- as.numeric(str_remove(cv_inner_resample,
                                         "_x_\\d{1,2}"))
inner_n_folds <- as.numeric(str_remove(cv_inner_resample,
                                       "\\d{1,3}_x_"))
inner_split_num <- 1:(inner_n_repeats * inner_n_folds)

```

Make configurations grid
```{r}
configs <- expand_grid(outer_split_num = outer_split_num,
                       inner_split_num = inner_split_num,
                       hp1 = hp1_glmnet,
                       hp2 = NA_integer_) |> 
  tibble::rownames_to_column("config_num") |> 
  mutate(config_num = as.numeric(config_num))
```

## Fit models

Set up wrapper function that contains tune_model() from fun_moodivate.R
```{r}
fit_eval <- function(config_current, configs, d, splits) {
  
  # filter single config row from configs
  config <- configs |> 
    filter(config_num == config_current)
  
  # fit model & get predictions and model metrics
  results <- tune_model(config = config,
                        rec = rec, 
                        splits = splits, 
                        ml_mode = ml_mode, 
                        cv_resample_type = cv_resample_type,
                        hp2_glmnet_min = hp2_glmnet_min, 
                        hp2_glmnet_max = hp2_glmnet_max, 
                        hp2_glmnet_out = hp2_glmnet_out,
                        y_level_pos = y_level_pos)
  
  return(results)
}

```

Fit models across all configurations
```{r}
results <- 1:max(configs$config_num) |> 
  map(\(config_current) fit_eval(config_current, configs, 
                                 d, splits)) |> 
  list_rbind() %>% 
  mutate(new_config_num = 1:nrow(.))
```

Save results
```{r}
results |> 
  write_csv("results.csv")
```


